name: CI/CD Pipeline for React

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때마다 파이프라인 실행
  pull_request:
    branches:
      - main # main 브랜치에 풀 리퀘스트가 생성될 때마다 파이프라인 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # Docker Buildx 세팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Docker 레이어 캐시
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # React Docker 이미지 빌드
      - name: Build React + NGINX Docker Image
        run: |
          docker build -t my-react-app ./react-app

      # Docker Hub에 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Docker 이미지를 Docker Hub에 푸시
      - name: Push React Docker Image to Docker Hub
        run: |
          docker tag my-react-app ${{ secrets.DOCKER_HUB_USERNAME }}/my-react-app:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/my-react-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # EC2에 SSH로 접속하여 Docker 이미지 풀 및 배포
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/my-react-app:latest
            docker stop my-react-container || true
            docker rm my-react-container || true
            docker run -d --name my-react-container -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/my-react-app:latest
